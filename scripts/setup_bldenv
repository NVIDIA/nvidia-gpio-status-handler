#!/usr/bin/env bash

##
# Copyright (c) 2021, NVIDIA CORPORATION.  All rights reserved.
#
# NVIDIA CORPORATION and its licensors retain all intellectual property
# and proprietary rights in and to this software, related documentation
# and any modifications thereto.  Any use, reproduction, disclosure or
# distribution of this software and related documentation without an express
# license agreement from NVIDIA CORPORATION is strictly prohibited.
##

##
# Script Template:
# https://github.com/zkxz/workscript/blob/master/linux/template.sh
##

set -o pipefail

############### App Constants ###############
APPNAME=setup_bldenv
APPVER=0.1

############### Definitions ###############
DEFUSR=nobody
DEFGRP=nogroup

get_realuser()
{
	local RUSR;RUSR=`logname 2>/dev/null`
	[ $? -ne 0 ] || [ -z "$RUSR" ] && RUSR=${LOGNAME}
	[ -z "$RUSR" ] && RUSR=${USER}
	[ -z "$RUSR" ] && RUSR=${DEFUSR}
	echo $RUSR
}

get_realgroup() # (user)
{
	local USR=$1
	[ -z "$USR" ] && USR=${DEFUSR}
	if [ "${DEFUSR}" = "$USR" ]; then
		echo "${DEFGRP}"
		return 0
	fi
	local GRP;GRP=`groups "$USR" 2>/dev/null | cut -d' ' -f3`
	[ $? -ne 0 ] || [ -z "$GRP" ] && GRP=${DEFGRP}
	echo $GRP
}

REALUSER=`get_realuser`
REALGROUP=`get_realgroup "${REALUSER}"`
LOGPATH=/tmp/${REALUSER}_${APPNAME}_$$
LG_TMP=tmp.log
LG_APP=app.log
APP_TMP=${LOGPATH}/${LG_TMP}
APP_LOG=${LOGPATH}/${LG_APP}

# Enable this for dryrun
#RUN=echo

############### Constants ###############


############### Functions ###############
show_help()
{
	echo "A Tool to Setup Code Building Environment, Ver=${APPVER}"
	echo "<usage>"
	echo "	sudo ./${APPNAME}"
	echo
}

### Logging Module
initlog()
{
	[ -d ${LOGPATH} ] || mkdir -p ${LOGPATH}
}

log() # (string...)
{
	local OPT
	if [ "$1" == "-n" ]; then
		OPT="-n"
		shift
	else
		OPT=""
	fi
	local MSG="`date '+[%Y-%m-%d %H:%M:%S]'` $*"
	#echo $OPT $MSG
	echo $OPT $MSG >> ${APP_LOG}
}

echo_log() # (string...)
{
	local MSG=$*
	echo $MSG
	log $MSG
}

cleanup()
{
	[ -d "${LOGPATH}" ] || return
	log "Cleanup log files..."
	rm -rf ${LOGPATH}
	set +o pipefail
}

### Common
DEPSLIST_GIT="
https://github.com/nlohmann/json.git|single_include|nlohmann/json.hpp
"

common_get_sdk()
{
	echo "Setup SDK..."
	local INSD=/usr/include
	local deps
	for deps in $DEPSLIST_GIT; do
		local URL=`echo $deps | cut -d'|' -f 1`
		[ -z "$URL" ] && echo "[E]No URL!" && continue
		local WKD=`basename "$URL"`
		local PTH=`echo $deps | cut -d'|' -f 2`
		local TGT=`echo $deps | cut -d'|' -f 3`
		[ -z "$TGT" ] && echo "[E]No target!" && continue
		$RUN git -C $LOGPATH clone "$URL" "$WKD"
		[ $? -ne 0 ] && echo "[E]Clone [$URL] failed!" && continue
		$RUN cp -a $LOGPATH/$WKD/$PTH/`dirname $TGT` "$INSD"
		[ $? -ne 0 ] && echo "[E]Install [$TGT] failed!" && continue
		echo "Install [$URL:$TGT] to [$INSD] done."
	done
}

common_presetup()
{
	return 0
}

common_setup()
{
	common_get_sdk
}

prereqst="wget vim git build-essential libsdl1.2-dev texinfo gawk chrpath diffstat python2.7 python3"
bld_pkg="git g++ autoconf autoconf-archive pkg-config libtool-bin doxygen meson"

### Ubuntu
ubuntu_get_build_tool()
{
	echo "Setup build tools for Ubuntu..."
	$RUN apt --assume-yes install $bld_pkg
	echo "Installing/Upgrading Python packages..."
	$RUN pip3 install -r scripts/python_requirements.txt --upgrade
}

ubuntu_presetup()
{
	$RUN apt update
	$RUN apt --assume-yes install $prereqst
}

ubuntu_setup()
{
	ubuntu_get_build_tool
}

### Cygwin
cygwin_presetup()
{
	echo "[W] Please install below packages manually!"
	for p in $prereqst; do echo $p; done
	return 1
}

cygwin_setup()
{
	echo "[W] Please install below packages manually!"
	for p in $bld_pkg; do echo $p; done
	return 1
}

### Unknown
unknown_presetup()
{
	echo "[E]Not supported OS type!"
	return 1
}

unknown_setup()
{
	echo "[E]Not supported OS type!"
	return 1
}

### OS Detection
get_os_name()
{
	local VAL=`cat /proc/version`
	echo "$VAL" | grep -i "ubuntu" &>/dev/null && echo "ubuntu" && return 0
	echo "$VAL" | grep -i "raspberrypi" &>/dev/null && echo "ubuntu" && return 0
	echo "$VAL" | grep -i "cygwin" &>/dev/null && echo "cygwin" && return 0
	echo "unknown"
}

# ============= MAIN ==============
trap cleanup EXIT
initlog

# (Main logic here)
OSTYPE=`get_os_name`

if [ "$OSTYPE" != "cygwin" ]; then
	if [ `whoami` != "root" ]; then
		echo "[E]Please run this script with root!"
		show_help
		exit 1
	fi
fi
${OSTYPE}_presetup || exit $?
for OS in common $OSTYPE; do
	${OS}_setup || exit $?
done

exit $?
cleanup
