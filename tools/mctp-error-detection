#!/usr/bin/env bash

set -o pipefail

APP_NAME="mctp-error-detection"
APP_VER="0.1"

show_help()
{
    echo "A wrapper for mctp-error-detection, ver=${APP_VER}."
    echo "<usage>"
    echo "  ${APP_NAME} [-dry-run] <dev_type>"
    echo
    echo "<options>"
    echo "  -dry-run          - Only print mctp-error-detection cmdline."
    echo
    echo "  dev_type          - Device Types Supported: GPU, NVSwitch, PCIeSwitch0"
    echo
}


## MAIN

DRY_RUN=0

## -dry-run just prints the mctp-error-detection command line
if [ "$1"  = "-dry-run" ]; then
   DRY_RUN=1
   shift
fi

if [ $# -ne 1 ]; then
    show_help
    exit 1
fi

cmdline="busctl call xyz.openbmc_project.GpuMgr /xyz/openbmc_project/GpuMgr xyz.openbmc_project.GpuMgr.Server PassthroughFpga iyyyau 0 0xb1 0x81 0 0"

# Sample Output: (iau) 0 4 0 520126897 8 0
# Indexes:         1   2 3 4  5        6 7
# Index Meaning:
#          1 signature
#          2 dBus return code
#          3 size from array of words (words of 64 bits)
#          4 array[0] = return code from PassthroughFpga
#          5 array[1] = states
#          6 array[2] = data output
#          7 array[3] = extended data

if [ "$DRY_RUN" -eq 1 ]; then
    echo $cmdline
    return 0
fi

#output="(iau) 0 4 0 520126897 5091 0"
#echo $output

output=`$cmdline`
# rc to contain first number from
# output of 
# busctl call xyz.openbmc_project.GpuMgr /xyz/openbmc_project/GpuMgr xyz.openbmc_project.GpuMgr.Server PassthroughFpga iyyyau 0 0xb1 0x81 0 0

rc=`echo $output |  awk -F'[^0-9]+' '{ print $2 }'`
if [ $rc -ne 0 ]
then
    echo "MCTP Error Detection, SMBPBI Error:" $rc
    exit $rc
fi

# Cut on delimiter ' ' to get 6 index, the data output
output=`echo $output | cut -d ' ' -f 6`


case $1 in

   GPU | GPU_SXM | HGX_GPU_SXM)
    # Return Bits 0-7
    bitmask=0xff
    ;;

  NVSwitch*)
    # Return Bits 8-11
    # Shift right by 8
    output=$(( $output >> 8 ))
    bitmask=0xf
    ;;

  PCIeSwitch*)
    # Return Bit 12
    # Shift right by 12
    output=$(( $output >> 12 ))
    bitmask=0x01
    ;;

  *)
    exit -1
    ;;
esac

echo $(( $bitmask & $output ))
exit 0
