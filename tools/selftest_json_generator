#!/usr/bin/env python3
import sys
import csv
import pprint
import json
import re


def show_help():
    print("<usage> {} <device> <csv file> [release]".format(sys.argv[0]))
    print("eg: {} GPU_SXM_[1-8] ./cfg.csv '*'".format(sys.argv[0]))
    print("\tomit [release] option to process ---all--- release TP rows\n\
\tset [release] option to process only matching release TP rows\n\
\t\tnote: implemented '*' wildcard meaning ---all non-empty--- release TP rows")


dev_pat = ''

csv_json_caption = {
    "Power Rail Status": "power_rail",
    "Pin Status": "pin_status",
    "EROT Control Status": "erot_control",
    "Interface Status": "interface_status",
    "Protocol Status": "protocol_status",
    "FW Status": "firmware_status",
    "DataDump": "data_dump",
}


def range_to_index(range_str, dev_id):

    global dev_pat

    try:
        dev_prefix, dev_min, dev_max = get_range_id(dev_pat)
        dev_width = (dev_max + 1) - dev_min
    except:
        dev_prefix = ''
        dev_min = dev_max = dev_width = 0

    try:
        acc_min, acc_max = get_range_only(range_str)
        acc_width = (acc_max + 1) - acc_min
    except:
        acc_prefix = ''
        acc_min = acc_max = acc_width = 0

    range_str = re.sub('\{.*?\}', dev_id, range_str)
    dev, idx = re.findall('(.+)([0-9+]+)', dev_id)[0]

    # if accessor range width and dev pattern range width are equal calculate
    # idx to cover different base id case, eg. [0-7] map to [1-8]
    if dev_width == acc_width and acc_width != 0:
        idx_offset = int(idx) - dev_min
        idx = str(acc_min + idx_offset)

    return re.sub('\[.+?\]', idx, range_str)


def get_range_id(str):
    prefix, min, max, _ = re.split('\[|-|\]', str)
    return prefix, int(min), int(max)


def get_range_only(str):
    # eg. returns (0, 7) out of 'some data [0-7] some-data'
    ign, min, max, ign = re.split('.*\[|-|\].*', str)
    return int(min), int(max)


def dbus_acc_maker(acc_info):
    return acc_info.split()


def cmdline_acc_maker(acc_info):
    return [acc_info.split()[0], ' '.join(acc_info.split()[1:])]


def accessor_maker(row, dev):
    acc_type = range_to_index(row['AccessorType'], dev)
    acc_info = range_to_index(row['Accessor'], dev)

    acc = {
        "type": acc_type
    }

    if acc_type == 'DEVICE':
        acc['device_name'] = acc_info
    elif acc_type == 'DBUS':
        acc['object'], acc['interface'], acc['property'] = dbus_acc_maker(
            acc_info)
    elif acc_type == 'CMDLINE':
        acc['executable'], acc['arguments'] = cmdline_acc_maker(acc_info)
    elif acc_type == 'DeviceCoreAPI':
        acc['property'] = acc_info
    else:
        return "[E] Unknown acc type " + acc_type

    return acc


def csv_read(dev_pattern, file, release):
    global dev_pat
    dev_pat = dev_pattern

    pp = pprint.PrettyPrinter(indent=2)

    content = {'': []}
    for key, name in enumerate(csv_json_caption):
        # pass
        content[name] = []
    # pp.pprint(content)

    with open(file, newline='') as csvfile:
        reader = csv.DictReader(csvfile)
        for row in reader:
            # print(row)
            # print(row['6-layer'])
            content[row['6-layer']].append(row)
    # print(content['Power Rail Status'], '\n')
    # print(content['Interface Status'], '\n')
    # pp.pprint(content)

    output = {}

    try:
        prefix, min, max = get_range_id(dev_pattern)
    except:
        prefix = dev_pattern
        min = max = 0

    for id in range(min, max + 1, 1):
        dev = prefix + str(id)
        # print(dev)
        output[dev] = {}
        test_layer = output[dev]
        for id, key in enumerate(csv_json_caption):
            # print(id, key)
            layer_name = csv_json_caption[key]

            test_layer[layer_name] = []
            for layer, row in enumerate(content[key]):

                if release == '*' and row['Milestone'] == "":
                    continue
                elif release != "" and release != "*" and release != row['Milestone']:
                    continue

                accessor = accessor_maker(row, dev)
                # print(json.dumps(accessor, indent=2))
                test_point = {
                    "name": range_to_index(row['TestPoint'], dev),
                    "accessor": accessor,
                    "expected_value": range_to_index(row['Expected'], dev)
                }
                # print(json.dumps(test_point, indent = 2))
                test_layer[layer_name].append(test_point)
                # pp.pprint(test_layer, sort_dicts = False)
            # pp.pprint(test_layer)
            # print(json.dumps(test_layer, indent = 2))

    print(json.dumps(output, indent=2))
    return


def main():
    argv = sys.argv[1:]
    if len(argv) != 2 and len(argv) != 3:
        show_help()
        return 1

    dev = argv[0]
    csv = argv[1]
    release = argv[2] if len(argv) == 3 else ""

    # print(csv_json_caption, '\n')

    csv_read(dev, csv, release)
    return 0


if __name__ == "__main__":
    # print(range_to_index('HSC[0-8] {} GPU {}', "GPU1"))
    main()
