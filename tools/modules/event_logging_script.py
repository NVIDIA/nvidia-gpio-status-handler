import json
import tempfile
import os


from injector_script_base import InjectorScriptBase


class EventLogsInjectorScript(InjectorScriptBase):
    """
    This class parses a Json Event file, then:
       1 Generates a bash script with busctl commands
    """

    def __init__(self, json_file):
        super().__init__(json_file)
        self._busctl_cmd_counter = 0
        self._busctl_info = ["", "", ""]  # 3 items only, 0=device name, 1=severity
        self._INDEX_DEVICE_NAME = 0 # index for self._busctl_info
        self._INDEX_SEVERITY    = 1 # index for self._busctl_info
        self._INDEX_EVENT       = 2 # index for self._busctl_info
        self._key_REDFISH_MESSAGE_ID = "REDFISH_MESSAGE_ID"
        self._key_REDFISH_MESSAGE_ARGS = "REDFISH_MESSAGE_ARGS"
        self._black_list      = ["accessor"] # fields not parsed from json file


    def create_script_file(self):
        """
        override parent method
        """
        super().priv_create_script_file("#!/bin/bash\n\n"
                                  "# This script is generated by event_validation.py, be aware that changes will be lost!\n\n"
                                  "DRY_RUN=1 # default do not run commands\n"
                                  "[ \"$1\" = \"-r\" -o \"$1\" = \"--run\" ] && DRY_RUN=0\n\n"
                                  "TEMPFILE=/tmp/$$.tmp\n"
                                  "echo 0 > $TEMPFILE\n\n"
                                  "run_cmd()\n"
                                  "{\n"
                                  "    cmd=\"$1\"\n"
                                  "    event=\"$2\"\n"
                                  "    echo $cmd\n"
                                  "    [ $DRY_RUN -eq 1 ] && return\n"
                                  "    eval \"$cmd\"\n"
                                  "    rc=$?\n"
                                  "    echo -n \"Injecting Device Event Log ($event) to D-Bus: \"\n"
                                  "    if [ $rc -ne 0 ]; then\n"
                                  "       echo \"Failed\"\n"
                                  "    else\n"
                                  "       echo \"Passed\"\n"
                                  "       # Fetch the value and increase it\n"
                                  "       COUNTER=$[$(cat $TEMPFILE) + 1]\n"
                                  "       # Store the new value\n"
                                  "       echo $COUNTER > $TEMPFILE\n"
                                  "    fi\n"
                                  "}\n"
                                 )


    def close_script_file(self):
        """
        override parent method
        """
        super().priv_close_script_file("\n\ninjections=$(cat $TEMPFILE)\n"
                                  "echo \"Successful Injections: $injections\"\n"
                                  "unlink $TEMPFILE\n\n")


    def __format_additional_data_copule(self, ad_key):
        return ' \\\n\t'  + ad_key + ' \\"' + self._additional_data[ad_key] + '\\"'


    def __create_bustcl_command(self):
        cmd  = '''busctl call xyz.openbmc_project.Logging /xyz/openbmc_project/logging '''
        cmd += "xyz.openbmc_project.Logging.Create Create ssa{ss} "
        cmd += '\\"' + self._busctl_info[self._INDEX_DEVICE_NAME] + '\\" '
        cmd +=  self._busctl_info[self._INDEX_SEVERITY] +  ' ' + str(len(self._additional_data))
        try:
            cmd += self.__format_additional_data_copule(self._key_REDFISH_MESSAGE_ID)
            cmd += self.__format_additional_data_copule(self._key_REDFISH_MESSAGE_ARGS)
            del self._additional_data[self._key_REDFISH_MESSAGE_ID]
            del self._additional_data[self._key_REDFISH_MESSAGE_ARGS]
        except Exception as e:
            raise Exception(f"Json either 'REDFISH_MESSAGE_ID' or 'REDFISH_MESSAGE_ARGS' information missing: {str(e)}")
        for ad_key in sorted(self._additional_data.keys()):
            cmd += self.__format_additional_data_copule(ad_key)
        self._busctl_cmd_counter += 1
      #  print("\ncounter=%03d command=%s" % (self._busctl_cmd_counter, cmd))
        return cmd


    def __parse_dict_data(self, device_name, data_device):
        fields_device = list(data_device.keys())
        self._busctl_info[self._INDEX_DEVICE_NAME] = device_name
        self._busctl_info[self._INDEX_SEVERITY] = "xyz.openbmc_project.Logging.Entry.Level.Notice"
        self._additional_data.clear()

        # REDFISH_MESSAGE_ARGS Not used so far, but it seems like necessary
        self._additional_data[self._key_REDFISH_MESSAGE_ARGS] = device_name + "_None, Fixme"

        ## this is the position to put the counter of custom field_and_value
        for field in fields_device:
            value = data_device[field]
            if field == "event":
                  self._busctl_info[self._INDEX_DEVICE_NAME]= device_name  + " " + value
                  self._busctl_info[self._INDEX_EVENT]= value
            elif field == "redfish":
                  self._additional_data[self._key_REDFISH_MESSAGE_ID] = value["message_id"] # redfish.message_id
            elif field == "severity":
                value_lower = value.lower();
                if value_lower == "warning":
                     self._busctl_info[self._INDEX_SEVERITY] = "xyz.openbmc_project.Logging.Entry.Level.Warning"
                elif value_lower == "critical":
                     self._busctl_info[self._INDEX_SEVERITY] = "xyz.openbmc_project.Logging.Entry.Level.Critical"
            elif field == "resolution":
                  self.parse_json_sub_dict_field(field, value, "xyz.openbmc_project.Logging.Entry.")

          # Other fields not used so far
          #  elif field.lower() not in self._black_list:
                 ## other fields will be added into self._additional_data
          #       self.parse_json_sub_dict_field(field, value)


    def generate_busctl_command_from_json_dict(self, device, data):
        self.__parse_dict_data(device, data)
        cmd  =  self.__create_bustcl_command()
        event_str = f'EVENT=\"{self._busctl_info[self._INDEX_EVENT]}\"\n'
        cmd_str   = f'CMD=\"{cmd}\"\n'
        run_str = 'run_cmd \"$CMD\" \"$EVENT\"'
        comments  = f"\n\n# https://127.0.0.1:2443/redfish/v1/Systems/system/LogServices/EventLog/Entries/{self._busctl_cmd_counter}\n"
        comments += f"# busctl introspect xyz.openbmc_project.Logging /xyz/openbmc_project/logging/entry/{self._busctl_cmd_counter}\n"
        super().write(comments)
        super().write(event_str)
        super().write(cmd_str)
        super().write(run_str)





