"""
Resources for 'Event Logging injection' bashh script generation
"""
import com  ## common constants and and functions

from injector_script_base import InjectorScriptBase


class EventLogsInjectorScript(InjectorScriptBase):
    """
    Parses a Json Event file, for all devices from Json file,
      generates 'busctl' commands for Event Logging injection
    """

    def __init__(self, json_file, force_message_args):
        super().__init__(json_file)
        self._busctl_cmd_counter = 0
        self._force_message_args = force_message_args # True/False
        self.commands_list = []  # store commands to write them after


    def create_script_file(self):
        """
        override parent method
        """
        super().priv_create_script_file("#!/bin/bash\n\n"
            "# This script is generated by event_validation.py,"
            " be aware that changes will be lost!\n\n"
            "gl_total_comands=0  # will be set as the total intended commands\n\n"
            "gl_counter_commands=0 # counter for commands being executed\n"
            "DRY_RUN=1 # default do not run commands\n"
            "[ \"$1\" = \"-r\" -o \"$1\" = \"--run\" ] && DRY_RUN=0\n\n"
            "TEMPFILE=/tmp/$$.tmp\n"
            "echo 0 > $TEMPFILE\n\n"
            "run_cmd()\n"
            "{\n"
            "    cmd=\"$1\"\n"
            "    event=\"$2\"\n"
            "    gl_counter_commands=$[ $gl_counter_commands + 1 ]\n"
            "    echo\n"
            "    if [ $gl_total_comands -ne 0 ]; then\n"
            "       echo \"injecting [$gl_counter_commands/$gl_total_comands]\"\n"
            "    fi\n"
            "    echo $cmd\n"
            "    [ $DRY_RUN -eq 1 ] && return\n"
            "    eval \"$cmd\"\n"
            "    rc=$?\n"
            "    echo -n \"Injecting Device Event Log ($event) to D-Bus: \"\n"
            "    if [ $rc -ne 0 ]; then\n"
            "       echo \"Failed\"\n"
            "    else\n"
            "       echo \"Passed\"\n"
            "       # Fetch the value and increase it\n"
            "       COUNTER=$[$(cat $TEMPFILE) + 1]\n"
            "       # Store the new value\n"
            "       echo $COUNTER > $TEMPFILE\n"
            "    fi\n"
            "}\n"
            )


    def close_script_file(self):
        """
        override parent method, does nothing
        """


    def __format_additional_data_copule(self, ad_key, prefix=None):
        str_key = ad_key if prefix is None else f"{prefix}{ad_key}"
        return ' \\\n\t'  + str_key + ' \\"' + self._additional_data[ad_key] + '\\"'


    def __create_bustcl_command(self):
        """
        Generates busctl command for a single device.

        First removes Accessor fiels from the self._additional_data as they
           will not be used
        """
        super().remove_accessor_fields()
        cmd  = f"busctl call {com.LOGGING_SERVICE} {com.LOGGING_OBJECT} "
        cmd += "xyz.openbmc_project.Logging.Create Create ssa{ss} "
        cmd += '\\"' + self._busctl_info[com.INDEX_DEVICE_NAME] + '\\" '
        cmd += self._additional_data[com.KEY_SEVERITY]
        del self._additional_data[com.KEY_SEVERITY]
        cmd += ' ' + str(len(self._additional_data))
        try:
            cmd += self.__format_additional_data_copule(com.REDFISH_MESSAGE_ID)
            del self._additional_data[com.REDFISH_MESSAGE_ID]
            if com.REDFISH_MESSAGE_ARGS in self._additional_data:
                cmd += self.__format_additional_data_copule(com.REDFISH_MESSAGE_ARGS)
                del self._additional_data[com.REDFISH_MESSAGE_ARGS]
        except Exception as error:
            raise Exception(\
                f"'{com.REDFISH_MESSAGE_ID}' information missing: {str(error)}") from error
        for ad_key in sorted(self._additional_data.keys()):
            cmd += self.__format_additional_data_copule(ad_key, com.LOGGING_ENTRY_DOT_STR)
        full_cmd = f'EVENT=\"{self._busctl_info[com.INDEX_EVENT]}\"\n'
        full_cmd += f'CMD=\"{cmd}\"\n'
        full_cmd += 'run_cmd \"$CMD\" \"$EVENT\"\n\n'
        self._busctl_cmd_counter += 1
        return full_cmd


    def parse_json_dict_data(self, device_name, data_device):
        """
        Redefines parent method
        """
        super().parse_json_dict_data(device_name, data_device)
        if self._force_message_args:
            self._additional_data[com.REDFISH_MESSAGE_ARGS] = device_name + "_None, Fixme"


    def generate_busctl_command_from_json_dict(self, device, data):
        """
        Redefines parent method
        Saves the buscl command for a single Event Logging injection
        """
        self.parse_json_dict_data(device, data)
        cmd  =  self.__create_bustcl_command()
        self.commands_list.append(cmd)


    def write_busctl_commands_into_script(self):
        """
        Just writes into the script the commands from self.commands_list
        """
        for cmd in self.commands_list:
            super().write(cmd)


    def generate_script_from_json(self):
        """
        Redefines from super

        busctl commands are saved into self.commands_list

        Writes the total of commands to be executed, it allows having a percentage
        Then writes all the commands
        """
        super().generate_script_from_json()
        if self._busctl_cmd_counter > 0:
            super().write(f"\ngl_total_comands={self._busctl_cmd_counter}\n\n")
            self.write_busctl_commands_into_script()
            super().priv_close_script_file("\ninjections=$(cat $TEMPFILE)\n"
                                  "echo; echo \"Successful Injections: $injections\"\n"
                                  "unlink $TEMPFILE\n\n")
